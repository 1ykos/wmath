#include "wmath_forward.hpp"
#include "wmath_algorithm.hpp"

namespace wmath{
  using std::lower_bound;
  using std::upper_bound;
//  a:55/1000$g:24/10$x:a/(g-1)$p:(1+a)**g*(g-1)**(g-1)/(a**(g-1)*g**g)$for i:0 while i<=256 do ( print(floor((2**64-1)*i/256),floor((2**64-1)*i/(256*p)),floor((2**64-1)*((i/256+a)/(1+a))**g)) );

//  a:55/1000$g:24/10$x:a/(g-1)$p:(1+a)**g*(g-1)**(g-1)/(a**(g-1)*g**g)$for i:0 while i<=256 do ( print(floor((2**64-1)*i/256),floor((2**64-1)*(p*i)/(256)),floor((2**64-1)*((1+a)*(i/256)**(1/g)-a))) );

  constexpr uint64_t gamma_lut[257] = 
  {
                     0ull,
      5575827757181533ull,
     11151655514363066ull,
     16727483271544599ull,
     22303311028726132ull,
     27879138785907666ull,
     33454966543089199ull,
     39030794300270732ull,
     44606622057452265ull,
     50182449814633798ull,
     55758277571815332ull,
     61478601512672042ull,
     67526790976441924ull,
     73908550791109569ull,
     80628940111822625ull,
     87692907160493813ull,
     95105295485866230ull,
    102870849668903148ull,
    110994220539329948ull,
    119479969959489250ull,
    128332575223678840ull,
    137556433114493666ull,
    147155863652129644ull,
    157135113567925552ull,
    167498359529459517ull,
    178249711141150938ull,
    189393213741444802ull,
    200932851015190606ull,
    212872547437705700ull,
    225216170565177917ull,
    237967533184470252ull,
    251130395334003894ull,
    264708466206184678ull,
    278705405940776327ull,
    293124827317690498ull,
    307970297356840719ull,
    323245338831979673ull,
    338953431704794288ull,
    355098014484959784ull,
    371682485521343126ull,
    388710204229090207ull,
    406184492256922872ull,
    424108634598605754ull,
    442485880652213774ull,
    461319445230534790ull,
    480612509525674384ull,
    500368222030688054ull,
    520589699420847071ull,
    541280027396945614ull,
    562442261492876321ull,
    584079427849537045ull,
    606194523956981856ull,
    628790519366592589ull,
    651870356374922199ull,
    675436950680746717ull,
    699493192016757657ull,
    724041944757230357ull,
    749086048502915158ull,
    774628318644316820ull,
    800671546904452425ull,
    827218501862108725ull,
    854271929456555855ull,
    881834553474615151ull,
    909909076020923994ull,
    938498177972189844ull,
    967604519416178494ull,
    997230740076137882ull,
   1027379459721318085ull,
   1058053278564210371ull,
   1089254777645092912ull,
   1120986519204437975ull,
   1153251047043704778ull,
   1186050886875013630ull,
   1219388546660170235ull,
   1253266516939484105ull,
   1287687271150801619ull,
   1322653265939152394ull,
   1358166941457387090ull,
   1394230721658165552ull,
   1430847014577636088ull,
   1468018212611129740ull,
   1505746692781177423ull,
   1544034816998142813ull,
   1582884932313749743ull,
   1622299371167769532ull,
   1662280451628121172ull,
   1702830477624625424ull,
   1743951739176642764ull,
   1785646512614814534ull,
   1827917060797116732ull,
   1870765633319426450ull,
   1914194466720792065ull,
   1958205784683589878ull,
   2002801798228741898ull,
   2047984705906161943ull,
   2093756693980590037ull,
   2140119936612968314ull,
   2187076596037505174ull,
   2234628822734568353ull,
   2282778755599541719ull,
   2331528522107775110ull,
   2380880238475751295ull,
   2430836009818589105ull,
   2481397930303997087ull,
   2532568083302787474ull,
   2584348541536055980ull,
   2636741367219128819ull,
   2689748612202374450ull,
   2743372318108973816ull,
   2797614516469739290ull,
   2852477228855069153ull,
   2907962467004121202ull,
   2964072232951285957ull,
   3020808519150037045ull,
   3078173308594233449ull,
   3136168574936945656ull,
   3194796282606875152ull,
   3254058386922434208ull,
   3313956834203550603ull,
   3374493561881259589ull,
   3435670498605143311ull,
   3497489564348675760ull,
   3559952670512529389ull,
   3623061720025897591ull,
   3686818607445885419ull,
   3751225219055019179ull,
   3816283432956923820ull,
   3881995119170215476ull,
   3948362139720654905ull,
   4015386348731606133ull,
   4083069592512843143ull,
   4151413709647746103ull,
   4220420531078927276ull,
   4290091880192325515ull,
   4360429572899806995ull,
   4431435417720308678ull,
   4503111215859559876ull,
   4575458761288416164ull,
   4648479840819838880ull,
   4722176234184552418ull,
   4796549714105410555ull,
   4871602046370502105ull,
   4947334989905025317ull,
   5023750296841959524ull,
   5100849712591561756ull,
   5178634975909715172ull,
   5257107818965155435ull,
   5336269967405600358ull,
   5416123140422807445ull,
   5496669050816583255ull,
   5577909405057767807ull,
   5659845903350216633ull,
   5742480239691802420ull,
   5825814101934457584ull,
   5909849171843278540ull,
   5994587125154711825ull,
   6080029631633841742ull,
   6166178355130798582ull,
   6253034953636306037ull,
   6340601079336385876ull,
   6428878378666237475ull,
   6517868492363309354ull,
   6607573055519579388ull,
   6697993697633059939ull,
   6789132042658543735ull,
   6880989709057605896ull,
   6973568309847877135ull,
   7066869452651602742ull,
   7160894739743501622ull,
   7255645768097939273ull,
   7351124129435428246ull,
   7447331410268469293ull,
   7544269191946746077ull,
   7641939050701685992ull,
   7740342557690399342ull,
   7839481279039008827ull,
   7939356775885380979ull,
   8039970604421270917ull,
   8141324315933891527ull,
   8243419456846917886ull,
   8346257568760937487ull,
   8449840188493356612ull,
   8554168848117772898ull,
   8659245075002823941ull,
   8765070391850521551ull,
   8871646316734081032ull,
   8978974363135254650ull,
   9087056039981178241ull,
   9195892851680739722ull,
   9305486298160478024ull,
   9415837874900020823ull,
   9526949072967069230ull,
   9638821379051937405ull,
   9751456275501654917ull,
   9864855240353639463ull,
   9979019747368947409ull,
  10093951266065109453ull,
  10209651261748558531ull,
  10326121195546656955ull,
  10443362524439329602ull,
  10561376701290309836ull,
  10680165174878004693ull,
  10799729389925985726ull,
  10920070787133111766ull,
  11041190803203289722ull,
  11163090870874879417ull,
  11285772418949748326ull,
  11409236872321981961ull,
  11533485652006255534ull,
  11658520175165872393ull,
  11784341855140474643ull,
  11910952101473431224ull,
  12038352319938908618ull,
  12166543912568629270ull,
  12295528277678322671ull,
  12425306809893873977ull,
  12555880900177174945ull,
  12687251935851681827ull,
  12819421300627684831ull,
  12952390374627293628ull,
  13086160534409143290ull,
  13220733152992824994ull,
  13356109599883045703ull,
  13492291241093520978ull,
  13629279439170604981ull,
  13767075553216661654ull,
  13905680938913180991ull,
  14045096948543644222ull,
  14185324931016141690ull,
  14326366231885747081ull,
  14468222193376651663ull,
  14610894154404062041ull,
  14754383450595864955ull,
  14898691414314062502ull,
  15043819374675981161ull,
  15189768657575257905ull,
  15336540585702606621ull,
  15484136478566368032ull,
  15632557652512846209ull,
  15781805420746434747ull,
  15931881093349535601ull,
  16082785977302273518ull,
  16234521376502008977ull,
  16387088591782652455ull,
  16540488920933782830ull,
  16694723658719572647ull,
  16849794096897522939ull,
  17005701524237010251ull,
  17162447226537648466ull,
  17320032486647467975ull,
  17478458584480914698ull,
  17637726797036671432ull,
  17797838398415303926ull,
  17958794659836734076ull,
  18120596849657542568ull,
  18283246233388103268ull,
  18446744073709551615ull
  };

  uint64_t const apply_srgb_gamma(const uint64_t& v) {
    const size_t i = v>>56;
    return gamma_lut[i]+get<0>(long_mul(v<<8,gamma_lut[i+1]-gamma_lut[i]));
  }

  uint64_t const revert_srgb_gamma(const uint64_t& v) {
    uint64_t i = upper_bound(gamma_lut,gamma_lut+256,v)-gamma_lut;
    //cerr << ((i-1)<<56) << " " << ((i<<56)-1u) << " "
    //     << gamma_lut[i-1] << " " << v << " " << gamma_lut[i] << endl;
    return interpol(v,gamma_lut[i-1],gamma_lut[i],(i-1)<<56,(i<<56)-1u);
    //return interpol(v,0ull,gamma_lut[i],0ull,i<<56);
  }

  const inline void hsv_rgb(
      uint64_t& h,
      uint64_t& s,
      uint64_t& v
      ){
    const uint64_t c = 3074457345618258602ull;
    const uint64_t o = ~uint64_t(0);
    const uint64_t i = h/c;
    const uint64_t f = 6*(h%c);
    //cerr << i << " " << f/double(o) << " "
    //     << (h%c)/double(o) << endl;
    const uint64_t p = get<0>(long_mul(v,o-s));
    const uint64_t q = get<0>(long_mul(v,o-get<0>(long_mul(s,f))));
    const uint64_t t = get<0>(long_mul(v,o-get<0>(long_mul(s,o-f))));
    switch (i){
      case 0:
      case 6:
        h = v;
        s = t;
        v = p;
        return;
      case 1:
        h = q;
        s = v;
        v = p;
        return;
      case 2:
        h = p;
        s = v;
        v = t;
        return;
      case 3:
        h = p;
        s = q;
        return;
      case 4:
        h = t;
        s = p;
        return;
      case 5:
        h = v;
        s = p;
        v = q;
        return;
    };
  }
}
